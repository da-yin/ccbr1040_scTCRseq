#                       col=colorRampPalette(c("darkblue","grey","darkred"))(256),
#                       row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
#                                                      ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
#                                                      ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
#                                           fontface = "bold"),
#                       column_names_gp = gpar(fontsize = 10, fontface = "bold"),
#                       cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
#                       column_names_rot = 65, width = unit(8, "cm"),
#                       column_title = name)
#
# pdf(paste0("Heatmap_", name, ".pdf"), width = 10, height = 10)
# print(p4)
# dev.off()
p5 = RidgePlot(so, features = genes)+NoLegend()
pdf(paste0("RidgePlot_", name, ".pdf"), width = 18, height = 14)
print(p5)
dev.off()
p6 = DoHeatmap(object = so, features = genes)
pdf(paste0("DoHeatmap_", name, ".pdf"))
print(p6)
dev.off()
}
mySeuratPlot(genes = TCR_components)
mySeuratPlot(genes = CoReceptors_CoSignalingMolecules)
mySeuratPlot(genes = cytokineReceptors_chemokineReceptors)
mySeuratPlot(genes = adhesionMolecules_guidanceMolecules)
mySeuratPlot(genes = otherSurfaceMolecules)
mySeuratPlot(genes = signalMolecules)
mySeuratPlot(genes = transcriptionFactors)
mySeuratPlot(genes = otherMolecules)
mySeuratPlot = function(genes){
DefaultAssay(so) = "RNA"
name = deparse(substitute(genes))
p1 = VlnPlot(so, features = genes, pt.size = 0.001)+NoLegend()
pdf(paste0("VlnPlot_", name, ".pdf"), width = 18, height = 14)
print(p1)
dev.off()
p2 = FeaturePlot(so, features = genes, reduction = "tsne", split.by = "group")
pdf(paste0("FeaturePlot_", name, ".pdf"), width = 12, height = ifelse(length(genes)<4, 10,
ifelse(4<=length(genes)&length(genes)<=5, 13,
ifelse(6<=length(genes)&length(genes)<=8, 18, 23))))
print(p2)
dev.off()
p3 = DotPlot(so, features = genes) + RotatedAxis()
pdf(paste0("DotPlot_", name, ".pdf"), width = 9, height = 9)
print(p3)
dev.off()
mat = so_ave$integrated[which(rownames(so_ave$integrated)%in%genes),]
# p4 =
# ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
#                       col=colorRampPalette(c("darkblue","grey","darkred"))(256),
#                       row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
#                                                      ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
#                                                      ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
#                                           fontface = "bold"),
#                       column_names_gp = gpar(fontsize = 10, fontface = "bold"),
#                       cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
#                       column_names_rot = 65, width = unit(8, "cm"),
#                       column_title = name)
#
# pdf(paste0("Heatmap_", name, ".pdf"), width = 10, height = 10)
# print(p4)
# dev.off()
p5 = RidgePlot(so, features = genes)+NoLegend()
pdf(paste0("RidgePlot_", name, ".pdf"), width = 18, height = 14)
print(p5)
dev.off()
p6 = DoHeatmap(object = so, features = genes)
pdf(paste0("DoHeatmap_", name, ".pdf"))
print(p6)
dev.off()
}
mySeuratPlot(genes = TCR_components)
mySeuratPlot(genes = CoReceptors_CoSignalingMolecules)
mySeuratPlot(genes = cytokineReceptors_chemokineReceptors)
mySeuratPlot(genes = adhesionMolecules_guidanceMolecules)
mySeuratPlot(genes = otherSurfaceMolecules)
mySeuratPlot(genes = signalMolecules)
mySeuratPlot(genes = transcriptionFactors)
mySeuratPlot(genes = otherMolecules)
mySeuratPlot = function(genes){
DefaultAssay(so) = "RNA"
name = deparse(substitute(genes))
p1 = VlnPlot(so, features = genes, pt.size = 0.001)+NoLegend()
pdf(paste0("VlnPlot_", name, ".pdf"), width = 18, height = 14)
print(p1)
dev.off()
p2 = FeaturePlot(so, features = genes, reduction = "tsne", split.by = "group")
pdf(paste0("FeaturePlot_", name, ".pdf"), width = 12, height = ifelse(2<length(genes)&length(genes)<=3, 10,
ifelse(4<=length(genes)&length(genes)<=5, 13,
ifelse(6<=length(genes)&length(genes)<=8, 20,
ifelse(length(genes)==2, 6, 26)))))
print(p2)
dev.off()
p3 = DotPlot(so, features = genes) + RotatedAxis()
pdf(paste0("DotPlot_", name, ".pdf"), width = 9, height = 9)
print(p3)
dev.off()
mat = so_ave$integrated[which(rownames(so_ave$integrated)%in%genes),]
# p4 =
# ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
#                       col=colorRampPalette(c("darkblue","grey","darkred"))(256),
#                       row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
#                                                      ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
#                                                      ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
#                                           fontface = "bold"),
#                       column_names_gp = gpar(fontsize = 10, fontface = "bold"),
#                       cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
#                       column_names_rot = 65, width = unit(8, "cm"),
#                       column_title = name)
#
# pdf(paste0("Heatmap_", name, ".pdf"), width = 10, height = 10)
# print(p4)
# dev.off()
p5 = RidgePlot(so, features = genes)+NoLegend()
pdf(paste0("RidgePlot_", name, ".pdf"), width = 18, height = 14)
print(p5)
dev.off()
p6 = DoHeatmap(object = so, features = genes)
pdf(paste0("DoHeatmap_", name, ".pdf"))
print(p6)
dev.off()
}
mySeuratPlot(genes = TCR_components)
mySeuratPlot(genes = CoReceptors_CoSignalingMolecules)
mySeuratPlot(genes = cytokineReceptors_chemokineReceptors)
mySeuratPlot(genes = adhesionMolecules_guidanceMolecules)
mySeuratPlot(genes = otherSurfaceMolecules)
mySeuratPlot(genes = signalMolecules)
mySeuratPlot(genes = transcriptionFactors)
mySeuratPlot(genes = otherMolecules)
myFeaturePlot = function(genes){
p2 = FeaturePlot(so, features = genes, reduction = "tsne", split.by = "group")
pdf(paste0("FeaturePlot_", name, ".pdf"), width = 12, height = 12,coord.fixed=TRUE)
print(p2)
dev.off()
}
myFeaturePlot = function(genes){
p2 = FeaturePlot(so, features = genes, reduction = "tsne", split.by = "group")
pdf(paste0("FeaturePlot_", name, ".pdf"),coord.fixed=TRUE)
print(p2)
dev.off()
}
myFeaturePlot(genes = TCR_components)
myFeaturePlot(genes = TCR_components, 12,14)
myFeaturePlot = function(genes, w, h){
p2 = FeaturePlot(so, features = genes, reduction = "tsne", split.by = "group")
pdf(paste0("FeaturePlot_", name, ".pdf"), width = w, height = h)
print(p2)
dev.off()
}
myFeaturePlot(genes = TCR_components, 12,14)
myFeaturePlot = function(genes, w, h){
name = deparse(substitute(genes))
p2 = FeaturePlot(so, features = genes, reduction = "tsne", split.by = "group")
pdf(paste0("FeaturePlot_", name, ".pdf"), width = w, height = h)
print(p2)
dev.off()
}
myFeaturePlot(genes = TCR_components, 12,14)
myFeaturePlot(genes = CoReceptors_CoSignalingMolecules,12,16)
myFeaturePlot(genes = cytokineReceptors_chemokineReceptors,12,16)
myFeaturePlot(genes = adhesionMolecules_guidanceMolecules)
myFeaturePlot(genes = otherSurfaceMolecules,4,4)
myFeaturePlot(genes = signalMolecules,12,28)
myFeaturePlot(genes = transcriptionFactors,12,28)
myFeaturePlot(genes = otherMolecules,12,28)
myFeaturePlot(genes = TCR_components, 12,14)
myFeaturePlot(genes = CoReceptors_CoSignalingMolecules,12,18)
myFeaturePlot(genes = cytokineReceptors_chemokineReceptors,12,16)
myFeaturePlot(genes = adhesionMolecules_guidanceMolecules)
myFeaturePlot(genes = otherSurfaceMolecules,7,7)
myFeaturePlot(genes = signalMolecules,12,29)
myFeaturePlot(genes = transcriptionFactors,12,31)
myFeaturePlot(genes = otherMolecules,12,28)
myFeaturePlot(genes = TCR_components, 12,15)
myFeaturePlot(genes = CoReceptors_CoSignalingMolecules,12,20)
myFeaturePlot(genes = cytokineReceptors_chemokineReceptors,12,18)
myFeaturePlot(genes = adhesionMolecules_guidanceMolecules)
myFeaturePlot(genes = otherSurfaceMolecules,8,7)
myFeaturePlot(genes = signalMolecules,12,31)
myFeaturePlot(genes = transcriptionFactors,12,33)
myFeaturePlot(genes = otherMolecules,12,29)
myFeaturePlot(genes = TCR_components, 12,15)
myFeaturePlot(genes = CoReceptors_CoSignalingMolecules,12,20)
myFeaturePlot(genes = cytokineReceptors_chemokineReceptors,12,18)
myFeaturePlot(genes = adhesionMolecules_guidanceMolecules,12,23)
myFeaturePlot(genes = otherSurfaceMolecules,9,6)
myFeaturePlot(genes = signalMolecules,12,31)
myFeaturePlot(genes = transcriptionFactors,12,33)
myFeaturePlot(genes = otherMolecules,12,30)
myFeaturePlot(genes = otherSurfaceMolecules,11,5)
myFeaturePlot(genes = otherSurfaceMolecules,10,6)
DimPlot(so, reduction = "tsne", split.by = "group")
myFeaturePlot = function(genes, w, h){
name = deparse(substitute(genes))
p2 = FeaturePlot(so, features = genes, reduction = "tsne", split.by = "group",cols.use = c("gray","red"))
pdf(paste0("FeaturePlot_", name, ".pdf"), width = w, height = h)
print(p2)
dev.off()
}
myFeaturePlot(genes = cytokineReceptors_chemokineReceptors,12,18)
library(RColorBrewer)
myFeaturePlot = function(genes, w, h){
name = deparse(substitute(genes))
p2 = FeaturePlot(so, features = genes, reduction = "tsne", split.by = "group",cols.use = c("gray","red"))
pdf(paste0("FeaturePlot_", name, ".pdf"), width = w, height = h)
print(p2)
dev.off()
}
myFeaturePlot(genes = cytokineReceptors_chemokineReceptors,12,18)
myFeaturePlot = function(genes, w, h){
name = deparse(substitute(genes))
p2 = FeaturePlot(so, features = genes, reduction = "tsne", split.by = "group",cols = c("gray","red"))
pdf(paste0("FeaturePlot_", name, ".pdf"), width = w, height = h)
print(p2)
dev.off()
}
myFeaturePlot(genes = cytokineReceptors_chemokineReceptors,12,18)
myFeaturePlot = function(genes, w, h){
name = deparse(substitute(genes))
p2 = FeaturePlot(so, features = genes, reduction = "tsne", split.by = "group",cols = c("lightgray","red"))
pdf(paste0("FeaturePlot_", name, ".pdf"), width = w, height = h)
print(p2)
dev.off()
}
myFeaturePlot(genes = cytokineReceptors_chemokineReceptors,12,18)
myFeaturePlot = function(genes, w, h){
name = deparse(substitute(genes))
p2 = FeaturePlot(so, features = genes, reduction = "tsne", split.by = "group",cols = c("lightred","red"))
pdf(paste0("FeaturePlot_", name, ".pdf"), width = w, height = h)
print(p2)
dev.off()
}
myFeaturePlot(genes = cytokineReceptors_chemokineReceptors,12,18)
myFeaturePlot = function(genes, w, h){
name = deparse(substitute(genes))
p2 = FeaturePlot(so, features = genes, reduction = "tsne", split.by = "group",cols = c("red3","red"))
pdf(paste0("FeaturePlot_", name, ".pdf"), width = w, height = h)
print(p2)
dev.off()
}
myFeaturePlot(genes = cytokineReceptors_chemokineReceptors,12,18)
myFeaturePlot = function(genes, w, h){
name = deparse(substitute(genes))
p2 = FeaturePlot(so, features = genes, reduction = "tsne", split.by = "group",cols = c("lightpink","indianred"))
pdf(paste0("FeaturePlot_", name, ".pdf"), width = w, height = h)
print(p2)
dev.off()
}
myFeaturePlot(genes = cytokineReceptors_chemokineReceptors,12,18)
myFeaturePlot = function(genes, w, h){
name = deparse(substitute(genes))
p2 = FeaturePlot(so, features = genes, reduction = "tsne", split.by = "group",cols = c("lightgrey","red4"))
pdf(paste0("FeaturePlot_", name, ".pdf"), width = w, height = h)
print(p2)
dev.off()
}
myFeaturePlot(genes = cytokineReceptors_chemokineReceptors,12,18)
myFeaturePlot = function(genes, w, h){
name = deparse(substitute(genes))
p2 = FeaturePlot(so, features = genes, reduction = "tsne", split.by = "group",cols = c("lightgrey","red"),
pt.size = 2
)
pdf(paste0("FeaturePlot_", name, ".pdf"), width = w, height = h)
print(p2)
dev.off()
}
myFeaturePlot(genes = cytokineReceptors_chemokineReceptors,12,18)
myFeaturePlot = function(genes, w, h){
name = deparse(substitute(genes))
p2 = FeaturePlot(so, features = genes, reduction = "tsne", split.by = "group",cols = c("lightgrey","red"))
pdf(paste0("FeaturePlot_", name, ".pdf"), width = w, height = h)
print(p2)
dev.off()
}
myFeaturePlot(genes = cytokineReceptors_chemokineReceptors,12,18)
myFeaturePlot = function(genes, w, h){
name = deparse(substitute(genes))
p2 = FeaturePlot(so, features = genes, reduction = "tsne", split.by = "group",cols = c("lightgrey","orangered","red"))
pdf(paste0("FeaturePlot_", name, ".pdf"), width = w, height = h)
print(p2)
dev.off()
}
myFeaturePlot(genes = cytokineReceptors_chemokineReceptors,12,18)
myFeaturePlot(genes = adhesionMolecules_guidanceMolecules,12,23)
a <- DotPlot(object = so, features = cytokineReceptors_chemokineReceptors)
a$data
a <- DotPlot(object = so, features = c("Cxcr4"))
a$data
so@assays$RNA
so@assays$RNA@counts
so@assays$RNA@counts[c("Cxcr4"),]
so@assays$RNA@counts[c("Cxcr4"),] %>% table()
so@assays$RNA@data[c("Cxcr4"),] %>% table()
so@assays$RNA@data[c("Cxcr4"),] %>% table()
so@assays$RNA@data[c("Cxcr4"),] %>% table()
so@assays$RNA@counts[c("Cxcr4"),] %>% table()
so@assays$RNA@data[c("Cxcr4"),] %>% table()
so@assays$RNA@scale.data[c("Cxcr4"),] %>% table()
so@assays$RNA@scale.data[c("Cxcr4"),]
so@assays$RNA@data
so@assays$RNA@counts
so@assays$RNA@data
so@assays$RNA@data[c("Cxcr4"),]
so@assays$RNA@data[c("Cxcr4"),] %>% plot()
so@assays$RNA@counts[c("Cxcr4"),] %>% plot()
so@assays$RNA@counts[c("Plxnd1"),] %>% plot()
so@assays$RNA@counts[c("Ccr7"),] %>% plot()
so@assays$RNA@counts[c("Ccr7"),] %>% table()
so@assays$RNA@data[c("Ccr7"),]
so@assays$RNA@data[c("Ccr7"),]%>% plot()
so@assays$RNA@data[c("Cxcr4"),]%>% plot()
so_ave
so_ave[c("Ccr7", "Cxcr4"),]
so_ave
so_ave$SCT[c("Cxcr4"),]
so_ave$SCT[c("Cxcr4","Ccr7"),]
so@assays$RNA@counts[c("Ccr7"),] %>% table()
so@assays$RNA@counts[c("Cxcr4"),] %>% table()
so@assays$RNA@counts[c("Ccr7"),] %>% table()
so_ave$SCT[c("Cxcr4","Ccr7"),]
mat = so_ave$SCT[c("Cxcr4","Ccr7"),]
# p4 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(8, "cm"),
column_title = name)
# p4 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(8, "cm"))
so@assays$RNA@counts[c("Cxcr4"),] %>% table()
so@assays$RNA@counts[c("Ccr7"),] %>% table()
so@assays$RNA@counts[c("Cxcr4"),] %>% table() %>% plot()
so@assays$RNA@counts[c("Ccr7"),] %>% table()%>% plot()
so@assays$RNA@counts[c("Cxcr4"),] %>% table() %>% plot()
so@assays$RNA@counts[c("Ccr7"),] %>% table()%>% plot()
so@assays$RNA@counts[c("Bcl2"),] %>% table()%>% plot()
so@assays$RNA@counts[c("S1pr1"),] %>% table()%>% plot()
so@assays$RNA@counts[c("S1pr1"),] %>% table()%>% plot()
so@assays$RNA@counts[c("Cxcr4"),] %>% table() %>% plot()
so@assays$RNA@counts[c("Ccr7"),] %>% table()%>% plot()
so@assays$RNA@counts[c("Bcl2"),] %>% table()%>% plot()
so@assays$RNA@counts[c("S1pr1"),] %>% table()%>% plot()
so@assays$RNA@counts[c("Cxcr4"),] %>% table()
so@assays$RNA@counts[c("Cxcr4"),] %>% table() %>% data_frame()
so@assays$RNA@counts[c("Cxcr4"),] %>% table()
so@assays$RNA@counts[c("Cxcr4"),] %>% table() %>% data.frame()
so@assays$RNA@counts[c("Ccr7"),] %>% table() %>% data.frame()
so@assays$RNA@counts[c("Cxcr4"),] %>% table() %>% data.frame()
Cxcr4 = so@assays$RNA@counts[c("Cxcr4"),] %>% table() %>% data.frame()
Cxcr4
Cxcr4$fraction = Cxcr4$Freq/sum(Cxcr4$Freq)
Cxcr4
colnames(Cxcr4)[1] = "Count"
Cxcr4
ggplot(data = Cxcr4, aes(x = Count, y = fraction, fill=Count)) + geom_bar(stat = "identity")
ggplot(data = Cxcr4, aes(x = Count, y = fraction, fill=Count)) + geom_bar(stat = "identity", position = "stack")
Cxcr4
ggplot(data = Cxcr4, aes(x = Count, y = fraction, fill=Count)) + geom_bar(stat = "identity", position = "stack")
Cxcr4
S1pr1 = so@assays$RNA@counts[c("S1pr1"),] %>% table() %>% data.frame()
S1pr1$fraction = S1pr1$Freq/sum(S1pr1$Freq)
colnames(S1pr1)[1] = "Count"
S1pr1
S1pr1$gene = "S1pr1"
Cxcr4$gene = "Cxcr4"
Cxcr4
df_all = rbind(Cxcr4, S1pr1)
df_all
ggplot(data = df_all, aes(x = gene, y = fraction, fill=Count)) + geom_bar(stat = "identity", position = "stack")
expr.pct = function(geneName){
df = so@assays$RNA@counts[c(geneName),] %>% table() %>% data.frame()
df$fraction = df$Freq/sum(df$Freq)
colnames(df)[1] = "Count"
df$gene = geneName
}
Cxcr4 = expr.pct("Cxcr4")
Cxcr4
expr.pct = function(geneName){
df = so@assays$RNA@counts[c(geneName),] %>% table() %>% data.frame()
df$fraction = df$Freq/sum(df$Freq)
colnames(df)[1] = "Count"
df$gene = geneName
}
Cxcr4 = expr.pct("Cxcr4")
Cxcr4
expr.pct = function(geneName){
df = so@assays$RNA@counts[c(geneName),] %>% table() %>% data.frame()
df$fraction = df$Freq/sum(df$Freq)
colnames(df)[1] = "Count"
df$gene = geneName
return(df)
}
Cxcr4 = expr.pct("Cxcr4")
Cxcr4
Bcl2 = expr.pct("Bcl2")
Plxnd1 = expr.pct("Plxnd1")
Cxcr4 = expr.pct("Cxcr4")
S1pr1 = expr.pct("S1pr1")
Ccr7 = expr.pct("Ccr7")
Ccr9 = expr.pct("Ccr9")
Itgb2 = expr.pct("Itgb2")
Itgb7 = expr.pct("Itgb7")
df_all = rbind(Bcl2,Plxnd1, Cxcr4, S1pr1,Ccr7,Ccr9,Itgb2,Itgb7)
ggplot(data = df_all, aes(x = gene, y = fraction, fill=Count)) + geom_bar(stat = "identity", position = "stack")
df_all
df_all2 = df_all[which(df_all$Count<10),]
ggplot(data = df_all2, aes(x = gene, y = fraction, fill=Count)) + geom_bar(stat = "identity", position = "stack")
df_all2
df_all
df_all2 = df_all[,which(df_all$Count<10)]
df_all2
df_all2
ggplot(data = df_all2, aes(x = gene, y = fraction, fill=Count)) + geom_bar(stat = "identity", position = "stack")
df_all2 = df_all[which(df_all$Count<10)]
df_all
df_all$Count = as.numeric(df_all$Count)
df_all2 = df_all[,which(df_all$Count<10)]
df_all2 = df_all[which(df_all$Count<10),]
df_all2
ggplot(data = df_all2, aes(x = gene, y = fraction, fill=Count)) + geom_bar(stat = "identity", position = "stack")
df_all2
ggplot(data = df_all2, aes(x = gene, y = fraction, fill=Count)) + geom_bar(stat = "identity", position = "stack")
ggplot(data = df_all, aes(x = gene, y = fraction, fill=Count)) + geom_bar(stat = "identity", position = "stack")
df_all$Count = as.factor(df_all$Count)
ggplot(data = df_all, aes(x = gene, y = fraction, fill=Count)) + geom_bar(stat = "identity", position = "stack")
DimPlot(so, reduction = "umap", group.by = "hash.ID")
countFraction =
ggplot(data = df_all, aes(x = gene, y = fraction, fill=Count)) + geom_bar(stat = "identity", position = "stack")
ggsave(filename = "countFraction.pdf",plot = countFraction)
ggplot(data = df_all, aes(x = gene, y = fraction, fill=Count, color=Count)) + geom_bar(stat = "identity", position = "stack")
ggplot(data = df_all, aes(x = gene, y = fraction, fill=Count, color="black")) + geom_bar(stat = "identity", position = "stack")
ggplot(data = df_all, aes(x = gene, y = fraction, fill=Count, colour="black")) + geom_bar(stat = "identity", position = "stack")
ggplot(data = df_all, aes(x = gene, y = fraction, fill=Count)) + geom_bar(stat = "identity", position = "stack", colour="black")
countFraction =
ggplot(data = df_all, aes(x = gene, y = fraction, fill=Count)) + geom_bar(stat = "identity", position = "stack", colour="black")
ggsave(filename = "countFraction.pdf",plot = countFraction)
so_ko = subset(so, cells=which(so$group="ko"))
so_ko = subset(so, cells=which(so$group=="ko"))
so_het = subset(so, cells=which(so$group=="het"))
DimPlot(so_ko, reduction = "tsne")
DimPlot(so_het, reduction = "tsne")
DimPlot.hashID_ko =
DimPlot(so_ko, reduction = "tsne")
DimPlot.hashID_het =
DimPlot(so_het, reduction = "tsne")
ggsave(filename = "DimPlot.hashID_ko.pdf",DimPlot.hashID_ko)
ggsave(filename = "DimPlot.hashID_het.pdf",DimPlot.hashID_het)
DimPlot.hashID_ko_het =
DimPlot(so, reduction = "tsne", split.by = "group")
ggsave(filename = "DimPlot.hashID_ko_het.pdf",DimPlot.hashID_ko_het)
myFeaturePlot(genes = TCR_components, 12,15)
myFeaturePlot(genes = CoReceptors_CoSignalingMolecules,12,20)
myFeaturePlot(genes = cytokineReceptors_chemokineReceptors,12,18)
myFeaturePlot(genes = adhesionMolecules_guidanceMolecules,12,23)
myFeaturePlot(genes = otherSurfaceMolecules,10,6)
myFeaturePlot(genes = signalMolecules,12,31)
myFeaturePlot(genes = transcriptionFactors,12,33)
myFeaturePlot(genes = otherMolecules,12,30)
myFeaturePlot = function(genes, w, h){
name = deparse(substitute(genes))
p2 = FeaturePlot(so, features = genes, reduction = "tsne", split.by = "group",cols = c("lightgrey","orangered","red"), order = TRUE)
pdf(paste0("FeaturePlot_", name, ".pdf"), width = w, height = h)
print(p2)
dev.off()
}
myFeaturePlot(genes = TCR_components, 12,15)
myFeaturePlot(genes = CoReceptors_CoSignalingMolecules,12,20)
myFeaturePlot(genes = cytokineReceptors_chemokineReceptors,12,18)
myFeaturePlot(genes = adhesionMolecules_guidanceMolecules,12,23)
myFeaturePlot(genes = otherSurfaceMolecules,10,6)
myFeaturePlot(genes = signalMolecules,12,31)
myFeaturePlot(genes = transcriptionFactors,12,33)
myFeaturePlot(genes = otherMolecules,12,30)
df_all
Bcl2
Plxnd1
df_all = rbind(Bcl2,Plxnd1,Cxcr4,S1pr1,Ccr7,Ccr9,Itgb2,Itgb7)
ggplot(data = df_all, aes(x = gene, y = fraction, fill=Count)) + geom_bar(stat = "identity", position = "stack", colour="black")
df_all
ggplot(data = df_all, aes(x = gene, y = fraction, fill=Count)) + geom_bar(stat = "identity", position = "stack", colour="black")
df_all$Count = as.numeric(df_all$Count)
ggplot(data = df_all, aes(x = gene, y = fraction, fill=Count)) + geom_bar(stat = "identity", position = "stack", colour="black")
df_all$Count = as.character(df_all$Count)
ggplot(data = df_all, aes(x = gene, y = fraction, fill=Count)) + geom_bar(stat = "identity", position = "stack", colour="black")
df_all$Count = as.factor(df_all$Count)
ggplot(data = df_all, aes(x = gene, y = fraction, fill=Count)) + geom_bar(stat = "identity", position = "stack", colour="black")
ggplot(data = df_all, aes(x = gene, y = fraction, fill=Count)) + geom_bar(stat = "identity", position = "stack", colour="black")
ggplot(data = df_all, aes(x = gene, y = fraction, fill=Count)) + geom_bar(stat = "identity", position = "stack", colour="black")+ theme(legend. title = element_blank())
countFraction =
ggplot(data = df_all, aes(x = gene, y = fraction, fill=Count)) + geom_bar(stat = "identity", position = "stack", colour="black")+ theme(legend. position = "none")
countFraction =
ggplot(data = df_all, aes(x = gene, y = fraction, fill=Count)) + geom_bar(stat = "identity", position = "stack", colour="black")+ theme(legend.position = "none")
countFraction
countFraction =
ggplot(data = df_all, aes(x = gene, y = fraction, fill=Count)) + geom_bar(stat = "identity", position = "stack", colour="black")+ theme(legend.position = "none")
ggsave(filename = "countFraction.pdf",plot = countFraction)
ggsave(filename = "countFraction.pdf",plot = countFraction)
