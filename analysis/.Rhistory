df = as.data.frame(table(sclcReshape$new_clusters, sclcReshape$Sample))
colnames(df)[1] = "cluster"
colnames(df)[2] = "Sample"
df_wide = spread(df, Sample, Freq)
#df_wide$total = rowSums(df_wide[,2:5])
rownames(df_wide) = df_wide$cluster
# normalize cluster cell numbers by total cell numbers by each sample
df_wide$SCAF1355_6=round(df_wide$SCAF1355_6*10000/sum(df_wide$SCAF1355_6))
df_wide$SCAF1356_16=round(df_wide$SCAF1356_16*10000/sum(df_wide$SCAF1356_16))
df_wide$SCAF1357_6PDC=round(df_wide$SCAF1357_6PDC*10000/sum(df_wide$SCAF1357_6PDC))
df_wide$SCAF1358_16PDC=round(df_wide$SCAF1358_16PDC*10000/sum(df_wide$SCAF1358_16PDC))
df_wide = df_wide[which(df_wide$cluster%in%c(1,2,3,5,6,7)),]
df_wide = data.matrix(df_wide[,2:5])
swept = sweep(df_wide,1,rowSums(df_wide),`/`)
swept
swept_long = melt(swept, id.vars=c("cluster"))
colnames(swept_long) = c("cluster","Sample","ratio")
p1 =
ggplot(swept_long, aes(x = as.factor(cluster), y = ratio, fill=Sample)) + geom_bar(position = "dodge", stat = "identity", width = 0.5) + theme(legend.position="top") + xlab("cluster") + theme(axis.text.x = element_text(face="bold")) + ylab("fraction")
p1
p1 =
ggplot(swept_long, aes(x = as.factor(cluster), y = ratio, fill=Sample)) + geom_bar(position = "stack", stat = "identity", width = 0.5) + theme(legend.position="top") + xlab("cluster") + theme(axis.text.x = element_text(face="bold")) + ylab("fraction")
p1
p1 =
ggplot(swept_long, aes(x = as.factor(cluster), y = ratio, fill=Sample)) + geom_bar(position = "stack", stat = "identity", width = 0.5) + theme(legend.position="top") + xlab("cluster") + theme(axis.text.x = element_text(face="bold")) + ylab("fraction") + coord_flip()
p1
immun_swept_long = melt(immun_swept, id.vars=c("cluster"))
df = as.data.frame(table(immunReshape$new_clusters, immunReshape$Sample))
colnames(df)[1] = "cluster"
colnames(df)[2] = "Sample"
df_wide = spread(df, Sample, Freq)
#df_wide$total = rowSums(df_wide[,2:5])
rownames(df_wide) = df_wide$cluster
# normalize cluster cell numbers by total cell numbers by each sample
df_wide$SCAF1355_6=round(df_wide$SCAF1355_6*10000/sum(df_wide$SCAF1355_6))
df_wide$SCAF1356_16=round(df_wide$SCAF1356_16*10000/sum(df_wide$SCAF1356_16))
df_wide$SCAF1357_6PDC=round(df_wide$SCAF1357_6PDC*10000/sum(df_wide$SCAF1357_6PDC))
df_wide$SCAF1358_16PDC=round(df_wide$SCAF1358_16PDC*10000/sum(df_wide$SCAF1358_16PDC))
df_wide = df_wide[which(df_wide$cluster%in%c(8,9,10,11,12)),]
df_wide = data.matrix(df_wide[,2:5])
immun_swept = sweep(df_wide,1,rowSums(df_wide),`/`)
immun_swept_long = melt(immun_swept, id.vars=c("cluster"))
colnames(immun_swept_long) = c("cluster","Sample","ratio")
p2 =
ggplot(immun_swept_long, aes(x = as.factor(cluster), y = ratio, fill=Sample)) + geom_bar(position = "stack", stat = "identity", width = 0.5) + theme(legend.position="top") + xlab("cluster") + theme(axis.text.x = element_text(face="bold")) + ylab("fraction") + coord_flip()
p2
df = as.data.frame(table(so$new_clusters, so$Sample))
colnames(df)[1] = "cluster"
colnames(df)[2] = "Sample"
df_wide = spread(df, Sample, Freq)
#df_wide$total = rowSums(df_wide[,2:5])
rownames(df_wide) = df_wide$cluster
# normalize cluster cell numbers by total cell numbers by each sample
df_wide$SCAF1355_6=round(df_wide$SCAF1355_6*10000/sum(df_wide$SCAF1355_6))
df_wide$SCAF1356_16=round(df_wide$SCAF1356_16*10000/sum(df_wide$SCAF1356_16))
df_wide$SCAF1357_6PDC=round(df_wide$SCAF1357_6PDC*10000/sum(df_wide$SCAF1357_6PDC))
df_wide$SCAF1358_16PDC=round(df_wide$SCAF1358_16PDC*10000/sum(df_wide$SCAF1358_16PDC))
df_wide = df_wide[which(df_wide$cluster%in%c(1,2,3,4,5,6,7,8,9,10,11,12)),]
df_wide = data.matrix(df_wide[,2:5])
swept = sweep(df_wide,1,rowSums(df_wide),`/`)
swept_long = melt(swept, id.vars=c("cluster"))
colnames(swept_long) = c("cluster","Sample","ratio")
p1 =
ggplot(swept_long, aes(x = as.factor(cluster), y = ratio, fill=Sample)) + geom_bar(position = "stack", stat = "identity", width = 0.5) + theme(legend.position="top") + xlab("cluster") + theme(axis.text.x = element_text(face="bold")) + ylab("fraction") + coord_flip()
p1
sessionInfo()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("batchelor")
BiocManager::install("batchelor")
library(batchelor)
install.packages(c("cowplot", "dplyr", "here", "knitr", "reshape2", "Routliers", "Seurat", "tidyverse", "VennDiagram"))
knitr::opts_chunk$set(echo = TRUE)
#suppressMessages(require(SingleCellExperiment))
suppressMessages(require(Seurat))
library(dplyr)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(ComplexHeatmap)
install_github("jokergoo/ComplexHeatmap")
library(devtools)
install.packages("devtools")
library(devtools)
install_github("jokergoo/ComplexHeatmap")
#suppressMessages(require(SingleCellExperiment))
suppressMessages(require(Seurat))
library(dplyr)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(ComplexHeatmap)
library(tidyverse)
suppressMessages(require(Matrix))
suppressMessages(require(SingleR))
suppressMessages(require(cowplot))
library(SingleR)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
#suppressMessages(require(SingleCellExperiment))
suppressMessages(require(Seurat))
library(dplyr)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(ComplexHeatmap)
library(tidyverse)
suppressMessages(require(Matrix))
suppressMessages(require(SingleR))
suppressMessages(require(cowplot))
library(SingleR)
library(Routliers)
#library("URD")
library("DoubletFinder")
#suppressMessages(require(SingleCellExperiment))
suppressMessages(require(Seurat))
library(dplyr)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(ComplexHeatmap)
library(tidyverse)
suppressMessages(require(Matrix))
suppressMessages(require(SingleR))
suppressMessages(require(cowplot))
library(SingleR)
library(Routliers)
#library("URD")
#library("DoubletFinder")
library(scRNAseq)
#suppressMessages(require(SingleCellExperiment))
suppressMessages(require(Seurat))
library(dplyr)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(ComplexHeatmap)
library(tidyverse)
suppressMessages(require(Matrix))
suppressMessages(require(SingleR))
suppressMessages(require(cowplot))
library(SingleR)
library(Routliers)
#library("URD")
#library("DoubletFinder")
#library(scRNAseq)
library(here)
library(harmony)
update.packages(ask = FALSE, checkBuilt = TRUE)
#suppressMessages(require(SingleCellExperiment))
suppressMessages(require(Seurat))
library(dplyr)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(ComplexHeatmap)
library(tidyverse)
suppressMessages(require(Matrix))
suppressMessages(require(SingleR))
suppressMessages(require(cowplot))
library(SingleR)
library(Routliers)
#library("URD")
#library("DoubletFinder")
#library(scRNAseq)
library(here)
library(harmony)
update.packages()
#suppressMessages(require(SingleCellExperiment))
suppressMessages(require(Seurat))
library(dplyr)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(ComplexHeatmap)
library(tidyverse)
suppressMessages(require(Matrix))
suppressMessages(require(SingleR))
suppressMessages(require(cowplot))
library(SingleR)
library(Routliers)
#library("URD")
#library("DoubletFinder")
#library(scRNAseq)
library(here)
library(harmony)
update.packages(checkBuilt=TRUE, ask=FALSE)
#suppressMessages(require(SingleCellExperiment))
suppressMessages(require(Seurat))
library(dplyr)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(ComplexHeatmap)
library(tidyverse)
suppressMessages(require(Matrix))
suppressMessages(require(SingleR))
suppressMessages(require(cowplot))
library(SingleR)
library(Routliers)
#library("URD")
#library("DoubletFinder")
#library(scRNAseq)
library(here)
library(harmony)
#suppressMessages(require(SingleCellExperiment))
suppressMessages(require(Seurat))
library(dplyr)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(ComplexHeatmap)
library(tidyverse)
suppressMessages(require(Matrix))
suppressMessages(require(SingleR))
suppressMessages(require(cowplot))
library(SingleR)
library(Routliers)
#library("URD")
#library("DoubletFinder")
#library(scRNAseq)
library(here)
#library(harmony)
library(batchelor)
theme_set(theme_classic())
#setwd("~/Desktop/active_projects/ccbr1040_scTCRseq/analysis/")
so = readRDS("~/Desktop/active_projects/seuratObject/ccbr1040_RObjectdata_noDoublet.rds")
so@meta.data$new_name = ifelse(so@meta.data$sample_name=="1MF1", "het_1MF1",
ifelse(so@meta.data$sample_name=="3MF1", "het_3MF1",
ifelse(so@meta.data$sample_name=="1MF2", "ko_1MF2", "ko_3MF2")))
so@meta.data$new_name = paste0(so@meta.data$new_name, "_", so@meta.data$hash.ID)
so@meta.data$new_name = gsub("mHTO0", "", so@meta.data$new_name)
my_levels <- c("het_1MF1_1", "het_3MF1_1", "ko_1MF2_1", "ko_3MF2_1",
"het_1MF1_2", "het_3MF1_2", "ko_1MF2_2", "ko_3MF2_2",
"het_1MF1_4", "het_3MF1_4", "ko_1MF2_4", "ko_3MF2_4",
"het_1MF1_5", "het_3MF1_5", "ko_1MF2_5", "ko_3MF2_5")
so@meta.data$new_name = factor(x = so@meta.data$new_name, levels = my_levels)
install_github("immunogenomics/harmony")
library(harmony)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("harmony", version = "3.8")
# fastMNN transformation and dimension reduction with batch correction
so_fastMNN <- RunFastMNN(object.list = SplitObject(so, split.by = "sample_name"))
remotes::install_github("satijalab/seurat-wrappers")
devtools::install_github('satijalab/seurat-wrappers')
sessionInfo()
package_version(Seurat)
package_version(seurat)
install.packages('Seurat')
install.packages('Seurat')
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(require(SingleCellExperiment))
suppressMessages(require(Seurat))
library(dplyr)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(ComplexHeatmap)
library(tidyverse)
suppressMessages(require(Matrix))
suppressMessages(require(SingleR))
suppressMessages(require(cowplot))
library(SingleR)
library(Routliers)
library("URD")
library(Routliers)
#library("URD")
library("DoubletFinder")
library(Routliers)
#library("URD")
#library("DoubletFinder")
library(scRNAseq)
#library("URD")
#library("DoubletFinder")
#library(scRNAseq)
library(here)
#library(harmony)
library(batchelor)
theme_set(theme_classic())
#setwd("~/Desktop/active_projects/ccbr1040_scTCRseq/analysis/")
so = readRDS("~/Desktop/active_projects/seuratObject/ccbr1040_RObjectdata_noDoublet.rds")
devtools::install_github('satijalab/seurat-wrappers')
sessionInfo()
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(require(SingleCellExperiment))
suppressMessages(require(Seurat))
library(dplyr)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(ComplexHeatmap)
library(tidyverse)
suppressMessages(require(Matrix))
suppressMessages(require(SingleR))
suppressMessages(require(cowplot))
library(SingleR)
library(Routliers)
#library("URD")
#library("DoubletFinder")
#library(scRNAseq)
library(here)
#library(harmony)
library(batchelor)
theme_set(theme_classic())
devtools::install_github('satijalab/seurat-wrappers')
library(devtools)
devtools::install_github('satijalab/seurat-wrappers')
remotes::install_github('satijalab/seurat-wrappers')
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
devtools::install_github('satijalab/seurat-wrappers')
usethis::browse_github_pat()
devtools::install_github('satijalab/seurat-wrappers')
devtools::install_github('satijalab/seurat-wrappers')
usethis::edit_r_environ()
so
#setwd("~/Desktop/active_projects/ccbr1040_scTCRseq/analysis/")
so = readRDS("~/Desktop/active_projects/seuratObject/ccbr1040_RObjectdata_noDoublet.rds")
so
so@assays
so@meta.data
install.packages("remotes")
library(remotes)
remotes::install_github("satijalab/seurat-wrappers")
knitr::opts_chunk$set(echo = TRUE)
library(SeuratWrappers)
suppressMessages(require(Seurat))
library(dplyr)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(ComplexHeatmap)
library(tidyverse)
suppressMessages(require(Matrix))
suppressMessages(require(SingleR))
suppressMessages(require(cowplot))
library(SingleR)
library(Routliers)
#library("URD")
#library("DoubletFinder")
#library(scRNAseq)
library(here)
#library(harmony)
library(batchelor)
#setwd("~/Desktop/active_projects/ccbr1040_scTCRseq/analysis/")
so = readRDS("~/Desktop/active_projects/seuratObject/ccbr1040_RObjectdata_noDoublet.rds")
so@meta.data
so2 <- RunFastMNN(object.list = SplitObject(so, split.by = "sample_name"))
so2 <- RunUMAP(so2, reduction = "mnn", dims = 1:30)
so2 <- FindNeighbors(so2, reduction = "mnn", dims = 1:30)
so2 <- FindClusters(so2)
so2
DimPlot(so2, group.by = "sample_name")
DimPlot(so, group.by = "sample_name")
DimPlot(so2, group.by = "sample_name")
so@meta.data
DimPlot(so, group.by = c("sample_name", "hash.ID"))
DimPlot(so2, group.by = c("sample_name", "hash.ID"))
so
so2
DimPlot(so, group.by = c("sample_name", "hash.ID"))
DimPlot(so2, group.by = c("sample_name", "hash.ID"))
so2 <- RunTSNE(so2, reduction = "mnn", dims = 1:30)
so2 <- FindNeighbors(so2, reduction = "mnn", dims = 1:30)
so2 <- FindClusters(so2)
so2
DimPlot(so, group.by = c("sample_name", "hash.ID"), reduction = "tsne")
DimPlot(so2, group.by = c("sample_name", "hash.ID"), reduction = "tsne")
so2
so2@meta.data
so2
DefaultAssay(so2)
#setwd("~/Desktop/active_projects/ccbr1040_scTCRseq/analysis/")
so = readRDS("~/Desktop/active_projects/seuratObject/ccbr1040_RObjectdata_noDoublet.rds")
so
DefaultAssay(so)
so <- SCTransform(so)
so <- RunFastMNN(object.list = SplitObject(so, split.by = "sample_name"))
# so <- RunUMAP(so, reduction = "mnn", dims = 1:30)
# so <- FindNeighbors(so, reduction = "mnn", dims = 1:30)
# so <- FindClusters(so)
so <- RunTSNE(so, reduction = "mnn", dims = 1:30)
so <- FindNeighbors(so, reduction = "mnn", dims = 1:30)
so <- FindClusters(so)
so
DimPlot(so, group.by = c("sample_name", "hash.ID"), reduction = "tsne")
so@meta.data$new_name = ifelse(so@meta.data$sample_name=="1MF1", "het_1MF1",
ifelse(so@meta.data$sample_name=="3MF1", "het_3MF1",
ifelse(so@meta.data$sample_name=="1MF2", "ko_1MF2", "ko_3MF2")))
so@meta.data$new_name = paste0(so@meta.data$new_name, "_", so@meta.data$hash.ID)
so@meta.data$new_name = gsub("mHTO0", "", so@meta.data$new_name)
my_levels <- c("het_1MF1_1", "het_3MF1_1", "ko_1MF2_1", "ko_3MF2_1",
"het_1MF1_2", "het_3MF1_2", "ko_1MF2_2", "ko_3MF2_2",
"het_1MF1_4", "het_3MF1_4", "ko_1MF2_4", "ko_3MF2_4",
"het_1MF1_5", "het_3MF1_5", "ko_1MF2_5", "ko_3MF2_5")
so@meta.data$new_name = factor(x = so@meta.data$new_name, levels = my_levels)
genes_of_interest = read.csv("processedData/genes_of_interest.csv", header = T, stringsAsFactors = F)
Idents(so)= "new_name"
so_ave = AverageExpression(object = so,assays = "SCT")
mySeuratPlot = function(genes){
name = deparse(substitute(genes))
p1 = VlnPlot(so, features = genes, pt.size = 0.001)+NoLegend()
pdf(paste0("VlnPlot_", name, ".pdf"), width = 14, height = 14)
print(p1)
dev.off()
p2 = FeaturePlot(so, features = genes, reduction = "tsne")
pdf(paste0("FeaturePlot_", name, ".pdf"), width = 14, height = 14)
print(p2)
dev.off()
mat = so_ave$SCT[which(rownames(so_ave$SCT)%in%genes),]
p3 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(5, "cm"),
column_title = name)
pdf(paste0("Heatmap_", name, ".pdf"), width = 10, height = 10)
print(p3)
dev.off()
}
TCR_components = genes_of_interest[which(genes_of_interest$type=="TCR_components"), c("gene")]
CoReceptors_CoSignalingMolecules = genes_of_interest[which(genes_of_interest$type=="CoReceptors_CoSignalingMolecules"), c("gene")]
cytokineReceptors_chemokineReceptors = genes_of_interest[which(genes_of_interest$type=="cytokineReceptors_chemokineReceptors"), c("gene")]
adhesionMolecules_guidanceMolecules = genes_of_interest[which(genes_of_interest$type=="adhesionMolecules_guidanceMolecules"), c("gene")]
otherSurfaceMolecules = genes_of_interest[which(genes_of_interest$type=="otherSurfaceMolecules"), c("gene")]
signalMolecules = genes_of_interest[which(genes_of_interest$type=="signalMolecules"), c("gene")]
transcriptionFactors = genes_of_interest[which(genes_of_interest$type=="transcriptionFactors"), c("gene")]
otherMolecules = genes_of_interest[which(genes_of_interest$type=="otherMolecules"), c("gene")]
getwd()
#library("URD")
#library("DoubletFinder")
#library(scRNAseq)
library(here)
getwd()
setwd("~/Desktop/active_projects/ccbr1040_scTCRseq/analysis/")
getwd()
setwd("~/Desktop/active_projects/ccbr1040_scTCRseq/analysis/")
getwd()
mySeuratPlot(genes = TCR_components)
mySeuratPlot(genes = CoReceptors_CoSignalingMolecules)
mySeuratPlot(genes = cytokineReceptors_chemokineReceptors)
mySeuratPlot(genes = adhesionMolecules_guidanceMolecules)
mySeuratPlot(genes = otherSurfaceMolecules)
mySeuratPlot(genes = signalMolecules)
mySeuratPlot(genes = transcriptionFactors)
mySeuratPlot(genes = otherMolecules)
var_genes  = apply(so_ave$SCT, 1, var)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:300]
so_ave_select = so_ave$SCT[select_var,]
mat = so_ave_select
p3 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(5, "cm"),
column_title = name)
p3 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(5, "cm"),
column_title = "")
p3
library(harmony)
so = readRDS("~/Desktop/active_projects/seuratObject/ccbr1040_RObjectdata_noDoublet.rds")
so_harmony<- SCTransform(so) %>% RunPCA(verbose = FALSE)
so_harmony<- RunHarmony(so_harmony, group.by.vars = "sample_name")
so_harmony<- RunTSNE(so_harmony, reduction = "harmony", dims = 1:30)
so_harmony<- FindNeighbors(so_harmony, reduction = "harmony", dims = 1:30) %>% FindClusters()
so_harmony<- FindClusters(so_harmony, algorithm=3)
so_harmony
DimPlot(so_harmony)
DimPlot(so_harmony, reduction = "tsne")
DimPlot(so_harmony, reduction = "harmony")
so_harmony<- FindClusters(so_harmony, algorithm=3)
so_harmony<- SCTransform(so) %>% RunPCA(verbose = FALSE)
so_harmony<- SCTransform(so)
so_harmony <- RunHarmony(so_harmony)
so_harmony <- RunHarmony(so_harmony,group.by.vars="sample_name")
so_harmony<- RunTSNE(so_harmony, reduction = "harmony", dims = 1:30)
so_harmony<- FindNeighbors(so_harmony, reduction = "harmony", dims = 1:30)
so_harmony<- FindNeighbors(so_harmony, reduction = "harmony", dims = 1:15)
so_harmony<- FindClusters(so_harmony)
devtools::install_github("hms-dbmi/conos")
install_name_tool -id '@rpath/igraph.so' /Library/Frameworks/R.framework/Resources/library/igraph/libs/igraph.so
install_github('MacoskoLab/liger')
devtools::install_github("hms-dbmi/sccore")
devtools::install_github("hms-dbmi/sccore", force = TRUE)
devtools::install_github("hms-dbmi/conos")
update.velocyto.R<-function(){
detach('package:velocyto.R', unload=TRUE)
remove.packages('velocyto.R')
devtools::install_github('velocyto-team/velocyto.R', args='--no-configure')
}
update.velocyto.R()
