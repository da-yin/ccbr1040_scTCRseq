dev.off()
p2 = FeaturePlot(so, features = genes, reduction = "tsne")
pdf(paste0("FeaturePlot_", name, ".pdf"), width = 14, height = 14)
print(p2)
dev.off()
mat = so_ave$SCT[which(rownames(so_ave$SCT)%in%genes),]
p3 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(5, "cm"),
column_title = name)
pdf(paste0("Heatmap_", name, ".pdf"), width = 10, height = 10)
print(p3)
dev.off()
}
genes_of_interest = read.csv("processedData/genes_of_interest.csv", header = T, stringsAsFactors = F)
getwd()
genes_of_interest = read.csv("processedData/genes_of_interest.csv", header = T, stringsAsFactors = F)
genes_of_interest = read.csv("results/processedData/genes_of_interest.csv", header = T, stringsAsFactors = F)
genes_of_interest
genes_of_interest$in_dataset = ifelse(genes_of_interest$gene%in%rownames(so), "yes", "no")
genes_of_interest
VlnPlot(so, features = c("Cd8a","Cd4","Cd5","Bax","H2-Q6","Bak1"), pt.size = 0.001)+NoLegend()
DefaultAssay(so)
DefaultAssay(so) = "RNA"
VlnPlot(so, features = c("Cd8a","Cd4","Cd5","Bax","H2-Q6","Bak1"), pt.size = 0.001)+NoLegend()
"Bax"%in% rownames(so)
genes_of_interest
genes_of_interest$in_dataset = ifelse(genes_of_interest$gene%in%rownames(so), "yes", "no")
genes_of_interest
write.csv(genes_of_interest,"results/processedData/genes_of_interest.csv", quote = F)
write.csv(genes_of_interest,"results/processedData/genes_of_interest.csv", quote = F, row.names = F)
VlnPlot(so, features = c("Cd8a","Cd4","Cd5","Bax","H2-Q6","Bak1"), pt.size = 0.001)+NoLegend()
mySeuratPlot = function(genes){
name = deparse(substitute(genes))
p1 = VlnPlot(so, features = genes, pt.size = 0.001)+NoLegend()
pdf(paste0("VlnPlot_", name, ".pdf"), width = 14, height = 14)
print(p1)
dev.off()
p2 = FeaturePlot(so, features = genes, reduction = "tsne")
pdf(paste0("FeaturePlot_", name, ".pdf"), width = 14, height = 14)
print(p2)
dev.off()
mat = so_ave$SCT[which(rownames(so_ave$SCT)%in%genes),]
p3 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(5, "cm"),
column_title = name)
pdf(paste0("Heatmap_", name, ".pdf"), width = 10, height = 10)
print(p3)
dev.off()
}
TCR_components = genes_of_interest[which(genes_of_interest$type=="TCR_components"), c("gene")]
CoReceptors_CoSignalingMolecules = genes_of_interest[which(genes_of_interest$type=="CoReceptors_CoSignalingMolecules"), c("gene")]
cytokineReceptors_chemokineReceptors = genes_of_interest[which(genes_of_interest$type=="cytokineReceptors_chemokineReceptors"), c("gene")]
adhesionMolecules_guidanceMolecules = genes_of_interest[which(genes_of_interest$type=="adhesionMolecules_guidanceMolecules"), c("gene")]
otherSurfaceMolecules = genes_of_interest[which(genes_of_interest$type=="otherSurfaceMolecules"), c("gene")]
signalMolecules = genes_of_interest[which(genes_of_interest$type=="signalMolecules"), c("gene")]
transcriptionFactors = genes_of_interest[which(genes_of_interest$type=="transcriptionFactors"), c("gene")]
otherMolecules = genes_of_interest[which(genes_of_interest$type=="otherMolecules"), c("gene")]
for (i in unique(genes_of_interest$type)){
myGenes = genes_of_interest[which(genes_of_interest$type==i), c("gene")]
}
mySeuratPlot(genes = TCR_components)
CoReceptors_CoSignalingMolecules = genes_of_interest[which(genes_of_interest$type=="CoReceptors_CoSignalingMolecules"), c("gene")]
cytokineReceptors_chemokineReceptors = genes_of_interest[which(genes_of_interest$type=="cytokineReceptors_chemokineReceptors"), c("gene")]
adhesionMolecules_guidanceMolecules = genes_of_interest[which(genes_of_interest$type=="adhesionMolecules_guidanceMolecules"), c("gene")]
otherSurfaceMolecules = genes_of_interest[which(genes_of_interest$type=="otherSurfaceMolecules"), c("gene")]
signalMolecules = genes_of_interest[which(genes_of_interest$type=="signalMolecules"), c("gene")]
transcriptionFactors = genes_of_interest[which(genes_of_interest$type=="transcriptionFactors"), c("gene")]
otherMolecules = genes_of_interest[which(genes_of_interest$type=="otherMolecules"), c("gene")]
mySeuratPlot(genes = CoReceptors_CoSignalingMolecules)
mySeuratPlot(genes = cytokineReceptors_chemokineReceptors)
mySeuratPlot(genes = adhesionMolecules_guidanceMolecules)
mySeuratPlot(genes = otherSurfaceMolecules)
mySeuratPlot = function(genes){
name = deparse(substitute(genes))
p1 = VlnPlot(so, features = genes, pt.size = 0.001)+NoLegend()
pdf(paste0("VlnPlot_", name, ".pdf"), width = 14, height = 14)
print(p1)
dev.off()
p2 = FeaturePlot(so, features = genes, reduction = "tsne")
pdf(paste0("FeaturePlot_", name, ".pdf"), width = 14, height = 14)
print(p2)
dev.off()
mat = so_ave$RNA[which(rownames(so_ave$RNA)%in%genes),]
p3 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(5, "cm"),
column_title = name)
pdf(paste0("Heatmap_", name, ".pdf"), width = 10, height = 10)
print(p3)
dev.off()
}
for (i in unique(genes_of_interest$type)){
myGenes = genes_of_interest[which(genes_of_interest$type==i), c("gene")]
}
mySeuratPlot(genes = TCR_components)
mySeuratPlot(genes = CoReceptors_CoSignalingMolecules)
mySeuratPlot(genes = cytokineReceptors_chemokineReceptors)
mySeuratPlot(genes = adhesionMolecules_guidanceMolecules)
mySeuratPlot(genes = otherSurfaceMolecules)
mySeuratPlot(genes = signalMolecules)
mySeuratPlot(genes = transcriptionFactors)
mySeuratPlot(genes = otherMolecules)
var_genes  = apply(so_ave$integrated, 1, var)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:1000]
so_ave_select = so_ave$integrated[select_var,]
mat = so_ave_select
p3 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(8, "cm"),
column_title = "")
p3
mySeuratPlot = function(genes){
name = deparse(substitute(genes))
p1 = VlnPlot(so, features = genes, pt.size = 0.001)+NoLegend()
pdf(paste0("VlnPlot_", name, ".pdf"), width = 14, height = 14)
print(p1)
dev.off()
p2 = FeaturePlot(so, features = genes, reduction = "tsne")
pdf(paste0("FeaturePlot_", name, ".pdf"), width = 14, height = 14)
print(p2)
dev.off()
mat = so_ave$RNA[which(rownames(so_ave$RNA)%in%genes),]
p3 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(8, "cm"),
column_title = name)
pdf(paste0("Heatmap_", name, ".pdf"), width = 10, height = 10)
print(p3)
dev.off()
}
mySeuratPlot(genes = TCR_components)
mySeuratPlot(genes = CoReceptors_CoSignalingMolecules)
mySeuratPlot(genes = cytokineReceptors_chemokineReceptors)
mySeuratPlot(genes = adhesionMolecules_guidanceMolecules)
mySeuratPlot(genes = otherSurfaceMolecules)
mySeuratPlot(genes = signalMolecules)
mySeuratPlot(genes = transcriptionFactors)
mySeuratPlot(genes = otherMolecules)
p3
DefaultAssay(so) = "RNA"
so <- SCTransform(so)
so <- RunFastMNN(object.list = SplitObject(so, split.by = "batch"))
# so <- RunUMAP(so, reduction = "mnn", dims = 1:30)
# so <- FindNeighbors(so, reduction = "mnn", dims = 1:30)
# so <- FindClusters(so)
so <- RunTSNE(so, reduction = "mnn", dims = 1:30)
so <- FindNeighbors(so, reduction = "mnn", dims = 1:30)
so <- FindClusters(so)
DimPlot(so, group.by = "sample_name")
DefaultAssay(so)
DimPlot(so, group.by = "sample_name")
FeaturePlot(so, features = "Cd69")
VlnPlot(so, features = "Cd69")
Idents(so)= "new_names"
VlnPlot(so, features = "Cd69")
Idents(so)= "new_name"
VlnPlot(so, features = "Cd69")
so@meta.data$new_name = ifelse(so@meta.data$sample_name=="1MF1", "het_1MF1",
ifelse(so@meta.data$sample_name=="3MF1", "het_3MF1",
ifelse(so@meta.data$sample_name=="1MF2", "ko_1MF2", "ko_3MF2")))
so@meta.data$new_name = paste0(so@meta.data$new_name, "_", so@meta.data$hash.ID)
so@meta.data$new_name = gsub("mHTO0", "", so@meta.data$new_name)
my_levels <- c("het_1MF1_1", "het_3MF1_1", "ko_1MF2_1", "ko_3MF2_1",
"het_1MF1_2", "het_3MF1_2", "ko_1MF2_2", "ko_3MF2_2",
"het_1MF1_4", "het_3MF1_4", "ko_1MF2_4", "ko_3MF2_4",
"het_1MF1_5", "het_3MF1_5", "ko_1MF2_5", "ko_3MF2_5")
so@meta.data$new_name = factor(x = so@meta.data$new_name, levels = my_levels)
Idents(so)= "new_name"
VlnPlot(so, features = "Cd69")
so = readRDS("~/Desktop/active_projects/seuratObject/ccbr1040_RObjectdata_noDoublet.rds")
so = readRDS("~/Desktop/active_projects/seuratObject/ccbr1040_RObjectdata_noDoublet.rds")
so@meta.data$batch = ifelse(so@meta.data$sample_name=="1MF1", "one",
ifelse(so@meta.data$sample_name=="1MF2", "one",
ifelse(so@meta.data$sample_name=="3MF1", "three","three")))
so@meta.data$batch = as.factor(so@meta.data$batch)
length(rownames(so))
so@meta.data$new_name = ifelse(so@meta.data$sample_name=="1MF1", "het_1MF1",
ifelse(so@meta.data$sample_name=="3MF1", "het_3MF1",
ifelse(so@meta.data$sample_name=="1MF2", "ko_1MF2", "ko_3MF2")))
so@meta.data$new_name = paste0(so@meta.data$new_name, "_", so@meta.data$hash.ID)
so@meta.data$new_name = gsub("mHTO0", "", so@meta.data$new_name)
my_levels <- c("het_1MF1_1", "het_3MF1_1", "ko_1MF2_1", "ko_3MF2_1",
"het_1MF1_2", "het_3MF1_2", "ko_1MF2_2", "ko_3MF2_2",
"het_1MF1_4", "het_3MF1_4", "ko_1MF2_4", "ko_3MF2_4",
"het_1MF1_5", "het_3MF1_5", "ko_1MF2_5", "ko_3MF2_5")
so@meta.data$new_name = factor(x = so@meta.data$new_name, levels = my_levels)
so
DimPlot(so, reduction = "tsne", group.by = "new_name")
DimPlot(so, reduction = "tsne", group.by = "sample_name")
length(rownames(so))
so.list <- SplitObject(so, split.by = "batch")
for (i in 1:length(so.list)) {
so.list[[i]] <- NormalizeData(so.list[[i]], verbose = FALSE)
so.list[[i]] <- FindVariableFeatures(so.list[[i]], selection.method = "vst",
nfeatures = 14264, verbose = FALSE)
}
reference.list <- so.list[c("one","three")]
so.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:30)
so.integrated <- IntegrateData(anchorset = so.anchors, dims = 1:30)
DefaultAssay(so.integrated) <- "integrated"
so.integrated <- ScaleData(so.integrated, verbose = FALSE)
so.integrated <- RunPCA(so.integrated, npcs = 30, verbose = FALSE)
so.integrated <- RunTSNE(so.integrated, reduction = "pca", dims = 1:30)
DimPlot(so.integrated, reduction = "tsne", group.by = "sample_name")
rownames(so) %>% length()
VlnPlot(so, features = "Cd69")
Idents(so)= "new_name"
VlnPlot(so, features = "Cd69")
DefaultAssay(so)
DefaultAssay(so) = "integrated"
so
rownames(so.integrated) %>% length()
for (i in 1:length(so.list)) {
so.list[[i]] <- NormalizeData(so.list[[i]], verbose = FALSE)
so.list[[i]] <- FindVariableFeatures(so.list[[i]], selection.method = "vst",
nfeatures = 10000, verbose = FALSE)
}
library(harmony)
setwd("~/Desktop/active_projects/ccbr1040_scTCRseq/analysis/")
so = readRDS("~/Desktop/active_projects/seuratObject/ccbr1040_RObjectdata_noDoublet.rds")
so@meta.data$batch = ifelse(so@meta.data$sample_name=="1MF1", "one",
ifelse(so@meta.data$sample_name=="1MF2", "one",
ifelse(so@meta.data$sample_name=="3MF1", "three","three")))
so@meta.data$batch = as.factor(so@meta.data$batch)
options(repr.plot.height = 2.5, repr.plot.width = 6)
so = so %>% RunHarmony("batch", plot_convergence = TRUE)
harmony_embeddings <- Embeddings(so, 'harmony')
harmony_embeddings[1:5, 1:5]
so
DimPlot(object = so, reduction = "harmony", pt.size = .1, group.by = "batch", do.return = TRUE)
DimPlot(object = so, reduction = "harmony", pt.size = .1, group.by = "batch")
so@meta.data$new_name = ifelse(so@meta.data$sample_name=="1MF1", "het_1MF1",
ifelse(so@meta.data$sample_name=="3MF1", "het_3MF1",
ifelse(so@meta.data$sample_name=="1MF2", "ko_1MF2", "ko_3MF2")))
so@meta.data$new_name = paste0(so@meta.data$new_name, "_", so@meta.data$hash.ID)
so@meta.data$new_name = gsub("mHTO0", "", so@meta.data$new_name)
my_levels <- c("het_1MF1_1", "het_3MF1_1", "ko_1MF2_1", "ko_3MF2_1",
"het_1MF1_2", "het_3MF1_2", "ko_1MF2_2", "ko_3MF2_2",
"het_1MF1_4", "het_3MF1_4", "ko_1MF2_4", "ko_3MF2_4",
"het_1MF1_5", "het_3MF1_5", "ko_1MF2_5", "ko_3MF2_5")
so@meta.data$new_name = factor(x = so@meta.data$new_name, levels = my_levels)
DimPlot(object = so, reduction = "harmony", pt.size = .1, group.by = "sample_name")
DimPlot(object = so, reduction = "tsne", pt.size = .1, group.by = "sample_name")
DimPlot(object = so, reduction = "harmony", pt.size = .1, group.by = "sample_name")
VlnPlot(object = so, features = "harmony_1", group.by = "batch", pt.size = .1)
VlnPlot(object = so, features = "harmony_1", group.by = "sample_name", pt.size = .1)
so_raw = readRDS("~/Desktop/active_projects/seuratObject/ccbr1040_RObjectdata_noDoublet.rds")
so_raw
DimPlot(object = so_raw, reduction = "pca", pt.size = .1, group.by = "sample_name")
VlnPlot(object = so_raw, features = "PC_1", group.by = "sample_name", pt.size = .1)
so <- so %>%
RunTSNE(reduction = "harmony", dims = 1:20) %>%
FindNeighbors(reduction = "harmony", dims = 1:20) %>%
FindClusters(resolution = 0.5) %>%
identity()
so <- so %>%
RunTSNE(reduction = "harmony", dims = 1:10) %>%
FindNeighbors(reduction = "harmony", dims = 1:10) %>%
FindClusters(resolution = 0.5) %>%
identity()
so
DimPlot(so, reduction = "tsne", group.by = "new_name", pt.size = .1)
DimPlot(so, reduction = "tsne", group.by = "sample_name", pt.size = .1)
DefaultAssay(so)
DimPlot(so, reduction = "tsne", group.by = "sample_name", pt.size = .1)
so
FeaturePlot(so, features = "Cd4", reduction = "tsne")
DefaultAssay(so)
Idents(so) = "new_name"
so_ave = AverageExpression(object = so)
var_genes  = apply(so_ave$RNA, 1, var)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:1000]
so_ave_select = so_ave$RNA[select_var,]
mat = so_ave_select
p3 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(10, "cm"),
column_title = "")
p3
var_genes  = apply(so_ave$RNA, 1, var)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:100]
so_ave_select = so_ave$RNA[select_var,]
mat = so_ave_select
p3 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(10, "cm"),
column_title = "")
p3
var_genes  = apply(so_ave$RNA, 1, var)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:3000]
so_ave_select = so_ave$RNA[select_var,]
mat = so_ave_select
p3 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(10, "cm"),
column_title = "")
p3
DefaultAssay(so)
DimPlot(so, reduction = "tsne", group.by = "sample_name", pt.size = .1)
DimPlot(object = so_raw, reduction = "pca", pt.size = .1, group.by = "sample_name")
DimPlot(object = so_raw, reduction = "tsne", pt.size = .1, group.by = "sample_name")
so_raw
so_FastMNN <- NormalizeData(so_raw)
so_FastMNN <- FindVariableFeatures(so_FastMNN)
so_FastMNN <- RunFastMNN(object.list = SplitObject(so_FastMNN, split.by = "batch"))
so_raw@meta.data$batch = ifelse(so_raw@meta.data$sample_name=="1MF1", "one",
ifelse(so_raw@meta.data$sample_name=="1MF2", "one",
ifelse(so_raw@meta.data$sample_name=="3MF1", "three","three")))
so_raw@meta.data$batch = as.factor(so_raw@meta.data$batch)
so_FastMNN <- NormalizeData(so_raw)
so_FastMNN <- FindVariableFeatures(so_FastMNN)
so_FastMNN <- RunFastMNN(object.list = SplitObject(so_FastMNN, split.by = "batch"))
so_FastMNN <- RunTSNE(so_FastMNN, reduction = "mnn", dims = 1:30)
so_FastMNN <- FindNeighbors(so_FastMNN, reduction = "mnn", dims = 1:30)
so_FastMNN <- FindClusters(so_FastMNN)
so_FastMNN
DimPlot(so_FastMNN, reduction = "tsne", group.by = "sample_name")
DefaultAssay(so_FastMNN)
Idents(so_FastMNN) = "new_name"
so_ave = AverageExpression(object = so_FastMNN)
so_FastMNN@meta.data$new_name = ifelse(so_FastMNN@meta.data$sample_name=="1MF1", "het_1MF1",
ifelse(so_FastMNN@meta.data$sample_name=="3MF1", "het_3MF1",
ifelse(so_FastMNN@meta.data$sample_name=="1MF2", "ko_1MF2", "ko_3MF2")))
so_FastMNN@meta.data$new_name = paste0(so_FastMNN@meta.data$new_name, "_", so_FastMNN@meta.data$hash.ID)
so_FastMNN@meta.data$new_name = gsub("mHTO0", "", so_FastMNN@meta.data$new_name)
my_levels <- c("het_1MF1_1", "het_3MF1_1", "ko_1MF2_1", "ko_3MF2_1",
"het_1MF1_2", "het_3MF1_2", "ko_1MF2_2", "ko_3MF2_2",
"het_1MF1_4", "het_3MF1_4", "ko_1MF2_4", "ko_3MF2_4",
"het_1MF1_5", "het_3MF1_5", "ko_1MF2_5", "ko_3MF2_5")
so_FastMNN@meta.data$new_name = factor(x = so_FastMNN@meta.data$new_name, levels = my_levels)
Idents(so_FastMNN) = "new_name"
so_ave = AverageExpression(object = so_FastMNN)
var_genes  = apply(so_ave$RNA, 1, var)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
so_ave_select = so_ave$RNA[select_var,]
mat = so_ave_select
p3 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(10, "cm"),
column_title = "")
p3
DimPlot(object = so, reduction = "harmony", pt.size = .1, group.by = "sample_name")
DimPlot(so, reduction = "tsne", group.by = "sample_name", pt.size = .1)
Idents(so) = "new_name"
so_ave = AverageExpression(object = so)
mySeuratPlot = function(genes){
name = deparse(substitute(genes))
p1 = VlnPlot(so, features = genes, pt.size = 0.001)+NoLegend()
pdf(paste0("VlnPlot_", name, ".pdf"), width = 14, height = 14)
print(p1)
dev.off()
p2 = FeaturePlot(so, features = genes, reduction = "tsne")
pdf(paste0("FeaturePlot_", name, ".pdf"), width = 14, height = 14)
print(p2)
dev.off()
mat = so_ave$RNA[which(rownames(so_ave$RNA)%in%genes),]
p3 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(8, "cm"),
column_title = name)
pdf(paste0("Heatmap_", name, ".pdf"), width = 10, height = 10)
print(p3)
dev.off()
}
mySeuratPlot(genes = TCR_components)
TCR_components = genes_of_interest[which(genes_of_interest$type=="TCR_components"), c("gene")]
genes_of_interest = read.csv("results/processedData/genes_of_interest.csv", header = T, stringsAsFactors = F)
TCR_components = genes_of_interest[which(genes_of_interest$type=="TCR_components"), c("gene")]
CoReceptors_CoSignalingMolecules = genes_of_interest[which(genes_of_interest$type=="CoReceptors_CoSignalingMolecules"), c("gene")]
cytokineReceptors_chemokineReceptors = genes_of_interest[which(genes_of_interest$type=="cytokineReceptors_chemokineReceptors"), c("gene")]
adhesionMolecules_guidanceMolecules = genes_of_interest[which(genes_of_interest$type=="adhesionMolecules_guidanceMolecules"), c("gene")]
otherSurfaceMolecules = genes_of_interest[which(genes_of_interest$type=="otherSurfaceMolecules"), c("gene")]
signalMolecules = genes_of_interest[which(genes_of_interest$type=="signalMolecules"), c("gene")]
transcriptionFactors = genes_of_interest[which(genes_of_interest$type=="transcriptionFactors"), c("gene")]
otherMolecules = genes_of_interest[which(genes_of_interest$type=="otherMolecules"), c("gene")]
mySeuratPlot(genes = TCR_components)
mySeuratPlot(genes = CoReceptors_CoSignalingMolecules)
mySeuratPlot(genes = cytokineReceptors_chemokineReceptors)
mySeuratPlot(genes = adhesionMolecules_guidanceMolecules)
mySeuratPlot(genes = otherSurfaceMolecules)
mySeuratPlot(genes = signalMolecules)
mySeuratPlot(genes = transcriptionFactors)
mySeuratPlot(genes = otherMolecules)
so = readRDS("~/Desktop/active_projects/seuratObject/ccbr1040_RObjectdata_noDoublet.rds")
so@meta.data$batch = ifelse(so@meta.data$sample_name=="1MF1", "one",
ifelse(so@meta.data$sample_name=="1MF2", "one",
ifelse(so@meta.data$sample_name=="3MF1", "three","three")))
so@meta.data$batch = as.factor(so@meta.data$batch)
so@meta.data$new_name = ifelse(so@meta.data$sample_name=="1MF1", "het_1MF1",
ifelse(so@meta.data$sample_name=="3MF1", "het_3MF1",
ifelse(so@meta.data$sample_name=="1MF2", "ko_1MF2", "ko_3MF2")))
so@meta.data$new_name = paste0(so@meta.data$new_name, "_", so@meta.data$hash.ID)
so@meta.data$new_name = gsub("mHTO0", "", so@meta.data$new_name)
my_levels <- c("het_1MF1_1", "het_3MF1_1", "ko_1MF2_1", "ko_3MF2_1",
"het_1MF1_2", "het_3MF1_2", "ko_1MF2_2", "ko_3MF2_2",
"het_1MF1_4", "het_3MF1_4", "ko_1MF2_4", "ko_3MF2_4",
"het_1MF1_5", "het_3MF1_5", "ko_1MF2_5", "ko_3MF2_5")
so@meta.data$new_name = factor(x = so@meta.data$new_name, levels = my_levels)
so = Seurat::NormalizeData() %>%
FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
ScaleData(verbose = FALSE)
so = Seurat::NormalizeData(so)
so = FindVariableFeatures(so, selection.method = "vst", nfeatures = 2000) %>% ScaleData(verbose = FALSE)
so = RunPCA(object = so, npcs = 20)
options(repr.plot.height = 2.5, repr.plot.width = 6)
so = so %>% RunHarmony("batch", plot_convergence = TRUE)
harmony_embeddings <- Embeddings(so, 'harmony')
harmony_embeddings[1:5, 1:5]
so
DimPlot(object = so, reduction = "harmony", pt.size = .1, group.by = "sample_name")
so <- so %>%
RunTSNE(reduction = "harmony", dims = 1:10) %>%
FindNeighbors(reduction = "harmony", dims = 1:10) %>%
FindClusters(resolution = 0.5) %>%
identity()
DimPlot(so, reduction = "tsne", group.by = "sample_name", pt.size = .1)
DefaultAssay(so)
DimPlot(so, reduction = "tsne", group.by = "sample_name", pt.size = .1)
Idents(so) = "new_name"
so_ave = AverageExpression(object = so)
var_genes  = apply(so_ave$RNA, 1, var)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
so_ave_select = so_ave$RNA[select_var,]
mat = so_ave_select
p3 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(10, "cm"),
column_title = "")
p3
session_info()
devtools::install_github(repo = "satijalab/seurat", ref = "develop")
library(Seurat)
session_info()
