myBP_ORA_pseudo1
listDatasets()
ensembl <- useMart("ensembl")
listDatasets(ensembl)
mart <- useDataset("mmurinus_gene_ensembl", useMart("ensembl"))
A_list = getBM(filters= "mmurinus_symbol", attributes= c("mmurinus_symbol", "description", "name_1006","definition_1006"),values=pseudotime_gene1,mart= mart)
listAttributes()
listAttributes(mart)
A_list = getBM(filters= "hgnc_symbol", attributes= c("hgnc_symbol", "description", "name_1006","definition_1006"),values=pseudotime_gene1,mart= mart)
A_list = getBM(filters= "hgnc_symbol", attributes= c("hgnc_symbol", "description", "name_1006","definition_1006"),values=pseudotime_gene1,mart= mart)
A_list
A_list = getBM(filters= "hgnc_symbol", attributes= c("hgnc_symbol", "description"),values=pseudotime_gene1,mart= mart)
A_list
pseudo1 = getBM(filters= "hgnc_symbol", attributes= c("hgnc_symbol", "description"),values=pseudotime_gene1,mart= mart)
pseudotime_gene3 = c("H3f3b", "Cd74", "Ccrl2", "Nfkbiz","Cxcl2", "Mt1","Cd83","Gadd45b","Tnf","H2-D1","Ftl1","Nfkbia","Ccl3","Ccl4","Apoe","Spp1","Fth1")
my_entrez3 = AnnotationDbi::select(Mm, keys = pseudotime_gene3,columns = c("ENTREZID", "SYMBOL"), keytype = "SYMBOL")
my_entrez3
myBP_ORA_pseudo3 = enrichGO(gene = as.character(my_entrez3$SYMBOL),universe = as.character(rownames(microgliaReshape)),
OrgDb = org.Mm.eg.db,keyType='SYMBOL', ont = "BP",pAdjustMethod = "BH", pvalueCutoff = 0.01, qvalueCutoff = 0.05)
myBP_ORA_pseudo3
dotplot(myBP_ORA_pseudo3)
pseudo3 = getBM(filters= "hgnc_symbol", attributes= c("hgnc_symbol", "description"),values=pseudotime_gene3,mart= mart)
pseudo3
myKEGG_ORA_pseudo3 =enrichKEGG(gene = as.character(my_entrez3$ENTREZID), universe = as.character(allGenes_entrez$ENTREZID), organism = 'mmu',
pvalueCutoff = 0.01, pAdjustMethod = "BH", qvalueCutoff = 0.05,minGSSize = 10, maxGSSize = 500)
myKEGG_ORA_pseudo3
dotplot(myKEGG_ORA_pseudo3)
myKEGG_ORA_pseudo3@result
select1 = c("Toll-like receptor signaling pathway", "NF-kappa B signaling pathway","Chemokine signaling pathway")
myKEGG_ORA_pseudo3_selectORA = myKEGG_ORA_pseudo3[which(myKEGG_ORA_pseudo3@result$Description%in%select1),asis=T]
cnetplot(myKEGG_ORA_pseudo3_selectORA)
myKEGG_ORA_pseudo3 = setReadable(myKEGG_ORA_pseudo3, 'org.Mm.eg.db', 'ENTREZID')
cnetplot(myKEGG_ORA_pseudo3_selectORA)
myKEGG_ORA_pseudo3_selectORA = myKEGG_ORA_pseudo3[which(myKEGG_ORA_pseudo3@result$Description%in%select1),asis=T]
cnetplot(myKEGG_ORA_pseudo3_selectORA)
cnetplot(myKEGG_ORA_pseudo3_selectORA)
emapplot(myKEGG_ORA_pseudo3_selectORA)
emapplot(myKEGG_ORA_pseudo3_selectORA)
barplot(myKEGG_ORA_pseudo3_selectORA)
barplot(myKEGG_ORA_pseudo3_selectORA)
pseudo3
knitr::opts_chunk$set(echo = TRUE)
so = readRDS("~/Desktop/ccbr1040_scTCRseq/rawData/RObjectdata.rds")
# RObjectdata.rds downloaded from
# https://gypsum.palantircloud.com/workspace/vector/view/ri.vector.main.workbook.611480ac-354a-403e-8284-6c080bb2c135?branch=maggie
so = subset(so, cells=which(so$hash.ID!="Doublet"&so$hash.ID!="Negative"))
so@meta.data$batch = ifelse(so@meta.data$sample_name=="1MF1", "one",
ifelse(so@meta.data$sample_name=="1MF2", "one",
ifelse(so@meta.data$sample_name=="3MF1", "three","three")))
so@meta.data$batch = as.factor(so@meta.data$batch)
so@meta.data$new_name = ifelse(so@meta.data$sample_name=="1MF1", "het",
ifelse(so@meta.data$sample_name=="3MF1", "het",
ifelse(so@meta.data$sample_name=="1MF2", "ko", "ko")))
# so@meta.data$new_name = ifelse(so@meta.data$sample_name=="1MF1", "het_1MF1",
#                                ifelse(so@meta.data$sample_name=="3MF1", "het_3MF1",
#                                       ifelse(so@meta.data$sample_name=="1MF2", "ko_1MF2", "ko_3MF2")))
so@meta.data$new_name = paste0(so@meta.data$new_name, "_", so@meta.data$hash.ID)
so@meta.data$new_name = gsub("mHTO0", "", so@meta.data$new_name)
my_levels <- c("het_1", "ko_1", "het_2", "ko_2", "het_4", "ko_4", "het_5", "ko_5")
# my_levels <- c("het_1MF1_1", "het_3MF1_1", "ko_1MF2_1", "ko_3MF2_1",
#                "het_1MF1_2", "het_3MF1_2", "ko_1MF2_2", "ko_3MF2_2",
#                "het_1MF1_4", "het_3MF1_4", "ko_1MF2_4", "ko_3MF2_4",
#                "het_1MF1_5", "het_3MF1_5", "ko_1MF2_5", "ko_3MF2_5")
so@meta.data$new_name = factor(x = so@meta.data$new_name, levels = my_levels)
table(so@meta.data$hash.ID)
so.list <- SplitObject(so, split.by = "batch")
#suppressMessages(require(SingleCellExperiment))
library(Seurat)
library(dplyr)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(ComplexHeatmap)
library(tidyverse)
library(Matrix)
library(SingleR)
library(cowplot)
library(SingleR)
library(Routliers)
#library("URD")
#library("DoubletFinder")
#library(scRNAseq)
library(here)
library(harmony)
library(batchelor)
library(devtools)
library(SeuratWrappers)
theme_set(theme_classic())
so.list <- SplitObject(so, split.by = "batch")
for (i in 1:length(so.list)) {
so.list[[i]] <- NormalizeData(so.list[[i]], verbose = FALSE)
so.list[[i]] <- FindVariableFeatures(so.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = FALSE)
}
reference.list <- so.list[c("one","three")]
so.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:30, anchor.features = rownames(so))
so.integrated <- IntegrateData(anchorset = so.anchors, dims = 1:30)
DefaultAssay(so.integrated) <- "integrated"
so.integrated <- ScaleData(so.integrated, verbose = FALSE)
so.integrated <- RunPCA(so.integrated, npcs = 30, verbose = FALSE)
so.integrated <- RunTSNE(so.integrated, reduction = "pca", dims = 1:30)
DimPlot(so.integrated, reduction = "tsne", group.by = "sample_name")
DefaultAssay(so.integrated)
DimPlot(so.integrated, reduction = "tsne", group.by = "sample_name")
saveRDS(object = so.integrated, file = "~/Desktop/active_projects/seuratObject/ccbr1040_noDoublet_noTCR_SeuratStandardBatchCorrected.5.31.2020.rds")
table(so.integrated@meta.data$new_name)
my_levels <- c("het_1", "ko_1", "het_2", "ko_2", "het_4", "ko_4", "het_5", "ko_5")
so.integrated@meta.data$new_name = factor(x = so.integrated@meta.data$new_name, levels = my_levels)
table(so.integrated@meta.data$new_name)
DefaultAssay(so.integrated)
DefaultAssay(so.integrated) = "RNA"
Idents(so.integrated) = "new_name"
so_ave = AverageExpression(object = so.integrated)
so_ave
so.integrated
genes_of_interest = read.csv("results/processedData/genes_of_interest.csv", header = T, stringsAsFactors = F)
mySeuratPlot = function(genes){
DefaultAssay(so.integrated) = "RNA"
name = deparse(substitute(genes))
p1 = VlnPlot(so.integrated, features = genes, pt.size = 0.001)+NoLegend()
pdf(paste0("VlnPlot_", name, ".pdf"), width = 18, height = 14)
print(p1)
dev.off()
p2 = FeaturePlot(so.integrated, features = genes, reduction = "tsne")
pdf(paste0("FeaturePlot_", name, ".pdf"), width = 12, height = 12)
print(p2)
dev.off()
p3 = DotPlot(so.integrated, features = genes) + RotatedAxis()
pdf(paste0("DotPlot_", name, ".pdf"), width = 9, height = 9)
print(p3)
dev.off()
mat = so_ave$integrated[which(rownames(so_ave$integrated)%in%genes),]
p4 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(8, "cm"),
column_title = name)
pdf(paste0("Heatmap_", name, ".pdf"), width = 10, height = 10)
print(p4)
dev.off()
}
TCR_components = genes_of_interest[which(genes_of_interest$type=="TCR_components"), c("gene")]
CoReceptors_CoSignalingMolecules = genes_of_interest[which(genes_of_interest$type=="CoReceptors_CoSignalingMolecules"), c("gene")]
cytokineReceptors_chemokineReceptors = genes_of_interest[which(genes_of_interest$type=="cytokineReceptors_chemokineReceptors"), c("gene")]
adhesionMolecules_guidanceMolecules = genes_of_interest[which(genes_of_interest$type=="adhesionMolecules_guidanceMolecules"), c("gene")]
otherSurfaceMolecules = genes_of_interest[which(genes_of_interest$type=="otherSurfaceMolecules"), c("gene")]
signalMolecules = genes_of_interest[which(genes_of_interest$type=="signalMolecules"), c("gene")]
transcriptionFactors = genes_of_interest[which(genes_of_interest$type=="transcriptionFactors"), c("gene")]
otherMolecules = genes_of_interest[which(genes_of_interest$type=="otherMolecules"), c("gene")]
mySeuratPlot(genes = TCR_components)
mySeuratPlot(genes = CoReceptors_CoSignalingMolecules)
mySeuratPlot(genes = cytokineReceptors_chemokineReceptors)
mySeuratPlot(genes = adhesionMolecules_guidanceMolecules)
mySeuratPlot(genes = otherSurfaceMolecules)
mySeuratPlot(genes = signalMolecules)
mySeuratPlot(genes = transcriptionFactors)
mySeuratPlot(genes = otherMolecules)
mySeuratPlot = function(genes){
DefaultAssay(so.integrated) = "RNA"
name = deparse(substitute(genes))
p1 = VlnPlot(so.integrated, features = genes, pt.size = 0.001)+NoLegend()
pdf(paste0("VlnPlot_", name, ".pdf"), width = 18, height = 14)
print(p1)
dev.off()
p2 = FeaturePlot(so.integrated, features = genes, reduction = "tsne")
pdf(paste0("FeaturePlot_", name, ".pdf"), width = 12, height = 12)
print(p2)
dev.off()
p3 = DotPlot(so.integrated, features = genes) + RotatedAxis()
pdf(paste0("DotPlot_", name, ".pdf"), width = 9, height = 9)
print(p3)
dev.off()
mat = so_ave$integrated[which(rownames(so_ave$integrated)%in%genes),]
p4 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(8, "cm"),
column_title = name)
pdf(paste0("Heatmap_", name, ".pdf"), width = 10, height = 10)
print(p4)
dev.off()
p5 = RidgePlot(so.integrated, features = genes)+NoLegend()
pdf(paste0("RidgePlot_", name, ".pdf"), width = 18, height = 14)
print(p5)
dev.off()
p6 = DoHeatmap(object = so.integrated, features = genes)
pdf(paste0("DoHeatmap_", name, ".pdf"))
print(p6)
dev.off()
}
mySeuratPlot(genes = TCR_components)
mySeuratPlot(genes = CoReceptors_CoSignalingMolecules)
DoHeatmap(so.integrated, features = c("Cd5", "Cd69", "Cd8a"))
DoHeatmap(so.integrated, features = "Cd5")
DoHeatmap(so, features = "Cd5")
so
so
so.integrated
knitr::opts_chunk$set(echo = TRUE)
#suppressMessages(require(SingleCellExperiment))
library(Seurat)
library(dplyr)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(ComplexHeatmap)
library(tidyverse)
library(Matrix)
library(SingleR)
library(cowplot)
library(SingleR)
library(Routliers)
#library("URD")
#library("DoubletFinder")
#library(scRNAseq)
library(here)
library(harmony)
library(batchelor)
library(devtools)
library(SeuratWrappers)
theme_set(theme_classic())
#suppressMessages(require(SingleCellExperiment))
library(Seurat)
library(dplyr)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(ComplexHeatmap)
library(tidyverse)
library(Matrix)
library(SingleR)
library(cowplot)
library(SingleR)
library(Routliers)
#library("URD")
#library("DoubletFinder")
#library(scRNAseq)
library(here)
library(harmony)
library(batchelor)
library(devtools)
library(SeuratWrappers)
theme_set(theme_classic())
so = readRDS("~/Desktop/ccbr1040_scTCRseq/rawData/RObjectdata.rds")
# RObjectdata.rds downloaded from
# https://gypsum.palantircloud.com/workspace/vector/view/ri.vector.main.workbook.611480ac-354a-403e-8284-6c080bb2c135?branch=maggie
so = subset(so, cells=which(so$hash.ID!="Doublet"&so$hash.ID!="Negative"))
so
DimPlot(so, reduction = "tsne", group.by = "hash.ID")
soSubset = SCTransform(so) %>% RunPCA()
# Use elbowPlot to find the number of PC to use for clustering
ElbowPlot(soSubset)
npcs = 15
soReshape= RunUMAP(soSubset, dims = 1:npcs)  %>% FindNeighbors() %>% FindClusters()
soReshape
DimPlot(soReshape, reduction = "tsne")
DimPlot(soReshape, reduction = "tsne", group.by = "hash.ID")
table(soReshape@meta.data$hash.ID)
DoHeatmap(soReshape, features = c("Cd69", "Cd4", "Cd8a", "Cd28"))
table(soReshape@meta.data$hash.ID)
table(soReshape@meta.data$hash.ID)
soReshape@meta.data$batch = ifelse(soReshape@meta.data$sample_name=="1MF1", "one",
ifelse(soReshape@meta.data$sample_name=="1MF2", "one",
ifelse(soReshape@meta.data$sample_name=="3MF1", "three","three")))
soReshape@meta.data$batch = as.factor(soReshape@meta.data$batch)
soReshape@meta.data$new_name = ifelse(soReshape@meta.data$sample_name=="1MF1", "het",
ifelse(soReshape@meta.data$sample_name=="3MF1", "het",
ifelse(soReshape@meta.data$sample_name=="1MF2", "ko", "ko")))
soReshape@meta.data$new_name = paste0(soReshape@meta.data$new_name, "_", soReshape@meta.data$hash.ID)
soReshape@meta.data$new_name = gsub("mHTO0", "", soReshape@meta.data$new_name)
my_levels <- c("het_1", "ko_1", "het_2", "ko_2", "het_4", "ko_4", "het_5", "ko_5")
soReshape@meta.data$new_name = factor(x = soReshape@meta.data$new_name, levels = my_levels)
DimPlot(soReshape, reduction = "tsne", group.by = "hash.ID")
saveRDS(object = soReshape, file = "~/Desktop/active_projects/seuratObject/ccbr1040_noDoublet_soReshape.5.31.2020.rds")
knitr::opts_chunk$set(echo = TRUE)
#suppressMessages(require(SingleCellExperiment))
library(Seurat)
library(dplyr)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(ComplexHeatmap)
library(tidyverse)
library(Matrix)
library(SingleR)
library(cowplot)
library(SingleR)
library(Routliers)
#library("URD")
#library("DoubletFinder")
#library(scRNAseq)
library(here)
library(harmony)
library(batchelor)
library(devtools)
library(SeuratWrappers)
theme_set(theme_classic())
setwd("~/Desktop/active_projects/ccbr1040_scTCRseq/analysis/")
so = readRDS("~/Desktop/active_projects/seuratObject/ccbr1040_noDoublet_soReshape.5.31.2020.rds")
Idents(so) = "new_name"
so_ave = AverageExpression(object = so, assays = "SCT")
genes_of_interest = read.csv("results/processedData/genes_of_interest.csv", header = T, stringsAsFactors = F)
mySeuratPlot = function(genes){
name = deparse(substitute(genes))
p1 = VlnPlot(so, features = genes, pt.size = 0.001)+NoLegend()
pdf(paste0("VlnPlot_", name, ".pdf"), width = 18, height = 14)
print(p1)
dev.off()
p2 = FeaturePlot(so, features = genes, reduction = "tsne")
pdf(paste0("FeaturePlot_", name, ".pdf"), width = 12, height = 12)
print(p2)
dev.off()
p3 = DotPlot(so, features = genes) + RotatedAxis()
pdf(paste0("DotPlot_", name, ".pdf"), width = 9, height = 9)
print(p3)
dev.off()
mat = so_ave$integrated[which(rownames(so_ave$integrated)%in%genes),]
p4 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(8, "cm"),
column_title = name)
pdf(paste0("Heatmap_", name, ".pdf"), width = 10, height = 10)
print(p4)
dev.off()
p5 = RidgePlot(so, features = genes)+NoLegend()
pdf(paste0("RidgePlot_", name, ".pdf"), width = 18, height = 14)
print(p5)
dev.off()
p6 = DoHeatmap(object = so, features = genes)
pdf(paste0("DoHeatmap_", name, ".pdf"))
print(p6)
dev.off()
}
TCR_components = genes_of_interest[which(genes_of_interest$type=="TCR_components"), c("gene")]
CoReceptors_CoSignalingMolecules = genes_of_interest[which(genes_of_interest$type=="CoReceptors_CoSignalingMolecules"), c("gene")]
cytokineReceptors_chemokineReceptors = genes_of_interest[which(genes_of_interest$type=="cytokineReceptors_chemokineReceptors"), c("gene")]
adhesionMolecules_guidanceMolecules = genes_of_interest[which(genes_of_interest$type=="adhesionMolecules_guidanceMolecules"), c("gene")]
otherSurfaceMolecules = genes_of_interest[which(genes_of_interest$type=="otherSurfaceMolecules"), c("gene")]
signalMolecules = genes_of_interest[which(genes_of_interest$type=="signalMolecules"), c("gene")]
transcriptionFactors = genes_of_interest[which(genes_of_interest$type=="transcriptionFactors"), c("gene")]
otherMolecules = genes_of_interest[which(genes_of_interest$type=="otherMolecules"), c("gene")]
mySeuratPlot(genes = TCR_components)
genes_of_interest = read.csv("results/processedData/genes_of_interest.csv", header = T, stringsAsFactors = F)
mySeuratPlot = function(genes){
name = deparse(substitute(genes))
p1 = VlnPlot(so, features = genes, pt.size = 0.001)+NoLegend()
pdf(paste0("VlnPlot_", name, ".pdf"), width = 18, height = 14)
print(p1)
dev.off()
p2 = FeaturePlot(so, features = genes, reduction = "tsne")
pdf(paste0("FeaturePlot_", name, ".pdf"), width = 12, height = 12)
print(p2)
dev.off()
p3 = DotPlot(so, features = genes) + RotatedAxis()
pdf(paste0("DotPlot_", name, ".pdf"), width = 9, height = 9)
print(p3)
dev.off()
mat = so_ave$integrated[which(rownames(so_ave$integrated)%in%genes),]
# p4 =
# ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
#                       col=colorRampPalette(c("darkblue","grey","darkred"))(256),
#                       row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
#                                                      ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
#                                                      ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
#                                           fontface = "bold"),
#                       column_names_gp = gpar(fontsize = 10, fontface = "bold"),
#                       cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
#                       column_names_rot = 65, width = unit(8, "cm"),
#                       column_title = name)
#
# pdf(paste0("Heatmap_", name, ".pdf"), width = 10, height = 10)
# print(p4)
# dev.off()
p5 = RidgePlot(so, features = genes)+NoLegend()
pdf(paste0("RidgePlot_", name, ".pdf"), width = 18, height = 14)
print(p5)
dev.off()
p6 = DoHeatmap(object = so, features = genes)
pdf(paste0("DoHeatmap_", name, ".pdf"))
print(p6)
dev.off()
}
TCR_components = genes_of_interest[which(genes_of_interest$type=="TCR_components"), c("gene")]
CoReceptors_CoSignalingMolecules = genes_of_interest[which(genes_of_interest$type=="CoReceptors_CoSignalingMolecules"), c("gene")]
cytokineReceptors_chemokineReceptors = genes_of_interest[which(genes_of_interest$type=="cytokineReceptors_chemokineReceptors"), c("gene")]
adhesionMolecules_guidanceMolecules = genes_of_interest[which(genes_of_interest$type=="adhesionMolecules_guidanceMolecules"), c("gene")]
otherSurfaceMolecules = genes_of_interest[which(genes_of_interest$type=="otherSurfaceMolecules"), c("gene")]
signalMolecules = genes_of_interest[which(genes_of_interest$type=="signalMolecules"), c("gene")]
transcriptionFactors = genes_of_interest[which(genes_of_interest$type=="transcriptionFactors"), c("gene")]
otherMolecules = genes_of_interest[which(genes_of_interest$type=="otherMolecules"), c("gene")]
mySeuratPlot(genes = TCR_components)
genes_of_interest = read.csv("results/processedData/genes_of_interest.csv", header = T, stringsAsFactors = F)
mySeuratPlot = function(genes){
DefaultAssay(so) = "RNA"
name = deparse(substitute(genes))
p1 = VlnPlot(so, features = genes, pt.size = 0.001)+NoLegend()
pdf(paste0("VlnPlot_", name, ".pdf"), width = 18, height = 14)
print(p1)
dev.off()
p2 = FeaturePlot(so, features = genes, reduction = "tsne")
pdf(paste0("FeaturePlot_", name, ".pdf"), width = 12, height = 12)
print(p2)
dev.off()
p3 = DotPlot(so, features = genes) + RotatedAxis()
pdf(paste0("DotPlot_", name, ".pdf"), width = 9, height = 9)
print(p3)
dev.off()
mat = so_ave$integrated[which(rownames(so_ave$integrated)%in%genes),]
# p4 =
# ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
#                       col=colorRampPalette(c("darkblue","grey","darkred"))(256),
#                       row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
#                                                      ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
#                                                      ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
#                                           fontface = "bold"),
#                       column_names_gp = gpar(fontsize = 10, fontface = "bold"),
#                       cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
#                       column_names_rot = 65, width = unit(8, "cm"),
#                       column_title = name)
#
# pdf(paste0("Heatmap_", name, ".pdf"), width = 10, height = 10)
# print(p4)
# dev.off()
p5 = RidgePlot(so, features = genes)+NoLegend()
pdf(paste0("RidgePlot_", name, ".pdf"), width = 18, height = 14)
print(p5)
dev.off()
p6 = DoHeatmap(object = so, features = genes)
pdf(paste0("DoHeatmap_", name, ".pdf"))
print(p6)
dev.off()
}
TCR_components = genes_of_interest[which(genes_of_interest$type=="TCR_components"), c("gene")]
CoReceptors_CoSignalingMolecules = genes_of_interest[which(genes_of_interest$type=="CoReceptors_CoSignalingMolecules"), c("gene")]
cytokineReceptors_chemokineReceptors = genes_of_interest[which(genes_of_interest$type=="cytokineReceptors_chemokineReceptors"), c("gene")]
adhesionMolecules_guidanceMolecules = genes_of_interest[which(genes_of_interest$type=="adhesionMolecules_guidanceMolecules"), c("gene")]
otherSurfaceMolecules = genes_of_interest[which(genes_of_interest$type=="otherSurfaceMolecules"), c("gene")]
signalMolecules = genes_of_interest[which(genes_of_interest$type=="signalMolecules"), c("gene")]
transcriptionFactors = genes_of_interest[which(genes_of_interest$type=="transcriptionFactors"), c("gene")]
otherMolecules = genes_of_interest[which(genes_of_interest$type=="otherMolecules"), c("gene")]
mySeuratPlot(genes = TCR_components)
mySeuratPlot(genes = CoReceptors_CoSignalingMolecules)
mySeuratPlot(genes = cytokineReceptors_chemokineReceptors)
mySeuratPlot(genes = adhesionMolecules_guidanceMolecules)
mySeuratPlot(genes = otherSurfaceMolecules)
mySeuratPlot(genes = signalMolecules)
mySeuratPlot(genes = transcriptionFactors)
mySeuratPlot(genes = otherMolecules)
DimPlot(so, reduction = "tsne", group.by = "hash.ID")
so
annotations = c("tsne", "umap")
for (i in annotations){
p = DimPlot(so, reduction = "tsne", group.by = i)
pdf(paste0("DimPlot_",i,".pdf"))
print(p)
dev.off()
}
annotations = c("tsne", "umap")
for (i in annotations){
p = DimPlot(so, reduction = i, group.by = "hash.ID")
pdf(paste0("DimPlot_",i,".pdf"))
print(p)
dev.off()
}
DimPlot(so, reduction = "umap", group.by = "hash.ID")
knitr::opts_chunk$set(echo = TRUE)
# soSubset = SCTransform(so) %>% RunPCA()
#
# # Use elbowPlot to find the number of PC to use for clustering
# ElbowPlot(soSubset)
#
# npcs = 15
# soReshape= RunUMAP(soSubset, dims = 1:npcs)  %>% FindNeighbors() %>% FindClusters()
#
DimPlot(soReshape, reduction = "tsne", group.by = "hash.ID")
# soSubset = SCTransform(so) %>% RunPCA()
#
# # Use elbowPlot to find the number of PC to use for clustering
# ElbowPlot(soSubset)
#
# npcs = 15
# soReshape= RunUMAP(soSubset, dims = 1:npcs)  %>% FindNeighbors() %>% FindClusters()
#
DimPlot(soReshape, reduction = "umap", group.by = "hash.ID")
# soSubset = SCTransform(so) %>% RunPCA()
#
# # Use elbowPlot to find the number of PC to use for clustering
# ElbowPlot(soSubset)
#
# npcs = 15
# soReshape= RunUMAP(soSubset, dims = 1:npcs)  %>% FindNeighbors() %>% FindClusters()
#
DimPlot(so, reduction = "umap", group.by = "hash.ID")
